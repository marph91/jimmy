name: build

on:
  push:
    paths-ignore:
      - "**.md"
  pull_request:
    paths-ignore:
      - "**.md"
  workflow_dispatch:

jobs:
  build:
    name: build
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    env:
      RUNNER_MACHINE: ${{ matrix.os }}  # TODO: Is there a built-in env variable?
      PYTHONPATH: jimmy
    strategy:
      fail-fast: false
      matrix:
        # available images: https://github.com/actions/runner-images?tab=readme-ov-file#available-images
        # "macos-latest" to support ARM based MACs
        # "macos-13" to support Intel based MACs
        # "ubuntu-latest" just for testing if there is an issue with newer glibc
        # "ubuntu-22.04" to get the lowest possible glibc version for compatibility
        os: ["windows-latest", "ubuntu-latest", "ubuntu-22.04", "ubuntu-22.04-arm", "macos-latest", "macos-13"]
        # build "macos-13" executable only at release
        # https://github.com/orgs/community/discussions/26253?sort=top#discussioncomment-3250989
        is_release:
          - ${{ startsWith(github.ref, 'refs/tags/v') }}
        exclude:
          - is_release: false
            os: "macos-13"
          - is_release: false
            os: "ubuntu-latest"
    steps:
      - uses: actions/checkout@v4
        with:
          # fetch all tags for the "git describe" later
          fetch-depth: 0
          submodules: true
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
      - name: Install dependencies
        # install only the really required modules before the pyinstaller build
        run: pip install -r requirements/requirements-build.txt
      - name: Build executables with pyinstaller
        run: |
          python -m PyInstaller jimmy.spec
      - name: Release
        uses: softprops/action-gh-release@v2
        # release only if there is a release tag
        if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        with:
          files: ./dist/jimmy*
      - name: Check executable size
        shell: bash
        run: ls -lh ./dist
      - name: Smoke test
        working-directory: ./dist  # run in a different directory to make sure that the paths are working
        run: |
          # pandoc and asciidoc converter
          ./jimmy* cli ../test/data/test_data/default_format/arbitrary_folder
          # filters and frontmatter module
          ./jimmy* cli ../test/data/test_data/obsidian/test_1_frontmatter --format obsidian
          ./jimmy* cli ../test/data/test_data/obsidian/test_1_frontmatter --format obsidian --exclude-tags "*"
          ./jimmy* cli ../test/data/test_data/obsidian/test_1_frontmatter --format obsidian --include-notes-with-tags "*"
          ./jimmy* cli ../test/data/test_data/obsidian/test_1_frontmatter --format obsidian --include-notes "Second sample note" "Sample note"
          # textbundle converter called from bear converter
          ./jimmy* cli ../test/data/test_data/bear/test_1_frontmatter/backup.bear2bk --format bear
          # cryptography module
          ./jimmy* cli ../test/data/test_data/colornote/test_1_frontmatter/colornote-20241014.backup --format colornote --password 1234
          # sqlite3 module
          ./jimmy* cli ../test/data/test_data/qownnotes/test_1_frontmatter/note_folder --format qownnotes
          # pyyaml module
          ./jimmy* cli ../test/data/test_data/rednotebook/test_2/RedNotebook-Backup-2024-09-15.zip --format rednotebook
          # anytype module
          ./jimmy* cli ../test/data/test_data/anytype/test_1/Anytype.20241112.175339.64 --format anytype
      # - name: Scan for viruses (just for information)
      #   if: runner.os == 'Linux'
      #   run: |
      #     sudo apt install -y clamav
      #     clamscan ./dist/jimmy*
